export TERM=xterm
BASE=~
export TRO=$BASE/throwaway
export ALP=$TRO/alpine
export LRO=$BASE/lroot
export MUSL=$ALP/lib/ld-musl-x86_64.so.1
export ROOT_LIB_PATH=/usr/local/lib:/usr/local/lib64:/usr/lib:/usr/lib64:/lib:/lib64
export LOCAL_LIB_PATH=$LRO/usr/lib:$LRO/usr/lib64:$LRO/lib:$LRO/lib64
export THROW_LIB_PATH=$ALP/lib:$ALP/lib64:$ALP/usr/lib:$ALP/usr/lib64
export GL_PATH=$ALP/usr/glibc-compat/lib

## proot, the tmp dir must allow exec
#export PROOT_TMP_DIR=/dev/shm PROOT_NO_SECCOMP=1

## origin or rootfs
#export LD_LIBRARY_PATH=$ROOT_LIB_PATH:$THROW_LIB_PATH
#export LD_LIBRARY_PATH=$THROW_LIB_PATH:$GL_LIB_PATH:$ROOT_LIB_PATH

## some possible useful paths
#export PATH=/usr/bin/bash:/usr/bin/python:$ALP/bin:$ALP/usr/bin:$ALP/usr/sbin:$ALP/sbin
#export PATH=$PATH:$TRO/bin:$TRO/usr/bin:$TRO/utils:$ALP/bin:$ALP/usr/bin:$ALP/usr/sbin:$ALP/sbin

## for fakechroot, note fakechroot requires glib matching with the host so it is rarely useful
#export LD_PRELOAD=$ALP/usr/lib/x86_64-linux-gnu/fakechroot/libfakechroot.so

## run musl binaries
function msl(){
        runmsl=`PATH=$ALP/bin:$ALP/usr/bin:$ALP/usr/sbin:$ALP/sbin:$BASEPATH /usr/bin/which $1`
        shift
        LD_LIBRARY_PATH=$THROW_LIB_PATH:$GL_LIB_PATH:$ROOT_LIB_PATH \
        $ALP/lib/ld-musl-x86_64.so.1 -- $runmsl $@
}

## install pkgs directly in the chroot
function apk(){
        LD_LIBRARY_PATH=$THROW_LIB_PATH:$GL_LIB_PATH:$ROOT_LIB_PATH \
        $ALP/lib/ld-musl-x86_64.so.1 -- $ALP/sbin/apk --root $ALP $@
}

## run with fakeroot, unshare with root mapping generally better
function fkr(){
        $ALP/usr/bin/fakeroot -l $ALP/usr/lib/libfakeroot.so -f "$ALP/lib/ld-musl-x86_64.so.1 $ALP/usr/bin/faked" -- $@
}
function fkrc(){
        c=`which $1`
        fkr $ALP/lib/ld-musl-x86_64.so.1 $c $@
}

## run with unshare root masking
function  ur(){
	msl unshare --map-root-user $@
}
